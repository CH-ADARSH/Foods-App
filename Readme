## Coding Assignment:

- Build a `Food Ordering App`
  - Think of a `cool name` for your app
  - Build an `AppLayout`
  - Build a `Header Component` with Logo & Nav Items & Cart
  - Build a `Body Component`
    - Build `RestaurantList Component`
    - Build `RestaurantCard Component`
      - Use `static data initially`
      - Make your `card dynamic`(pass in props)
        - `Props` - passing arguments to a function - Use Destructuring & Spread operator
      - `Render` your cards with dynamic data of restaurants
      - Use `Array.map` to render all the restaurants

## Coding Challenge

- Understood the importance of the file structure.
  - Every Component should be in a different file name after its component_name.(Always make sure Components must start with capital letterðŸš€).
  - It is a good practice to keep the HARD-CODED DATA(EG:- data,logoimg,cdn for images if any) in utils folder in the src.
  - This is considered a good practice.
- Learnt about 2 different types of imports and exports named export and other is default export.
  - Suppose you want to export 2 values its better to use named export.(simply by writing "export const Utils_Name").
  - Else use default export for componets.
  - Named export can be imported using following eg:-
    import {named export name} from "../utils/named export name".
  - you can use a default export along with named exports in the same JavaScript/React file
- Added conflict driven UI.

## Adding top rated feature

- using onclick event
- Hooks in React :- UseState() , React keeps track of the state variable
- how React Reconcilation algorithm works(It is also known as React Fiber).
- React keeps on creating and rendering virtualDOM whenever a react reconcilation occur
-

## Shimmer UI

- Industry best practice to use shimmer ui to imporve user experience
- its kind of fake cards which are transparent or shimmeer ui
- whenevr we load a page before we see the actual data we see an empty cards that is what is shimmer ui

## Hooks

## useState()

## useEffect()

## useRouteError()

-- React-router-dom has another powerful component, "Link" component which takes "to" as a parameter its is helpful in traversing from one page to another without refreshing the page. error managemnt.

## 2 Types of routing in web apps

- client side routing
  -- using link component we can create a client side routing
  -- from home page to contact page by clicking on it the page does not load but only components move.
  -- this is why react is a single page application.
- server side routing
  -- using anchor tag to route from home page to contact page by clicking
  -- make a call and then the page reloads the whole page

## Dynamic routing

- using " : " colon we can dynamically traverse.

## RestuarantMenu

-- implemented how to render each card data
-- A feature to show menu when clicked on the Restaurantcard

-- on clicked on Restaurantcard ==> RestaurantMenu appears

-- learnt about custom hook implemented (online feature)

## BUNDLING THE APP BASED ON ( ASSUME AS FOOD DELIVERY AND OTHER IS GROCEORY DELIVERY)

-- sepearte bundle for grocery
-- we load our page by using lazy-loading (ONDEMAND loaDING), It says when our app loads it won't load the grocery page, but only when we visit the link our grocery page it will load
-- initially our page wont have the grocery file.
--- LAZY() => it is a named function given by react.It takes a callback function.
(eg:- const Component_Name = lazy(()=>import("./path of the component"))).
--- IT IS ALWAYS BETTER TO USE SUSPENSE componet with lazy loading (Wrap ur component with suspense).
--- it has fallback , which means you can say what you what to do when the page is loading.(you can pass component like shimmerUI or any other and also h1 with any msg you want to show to the user).

## NOTE --- DO NOT IMPORT THE COMPONENT MANUALLY.IF YOU CREATE IT MANUALLY IT WON'T CREATE A SEPERATE CHUNK FOR THE GROCERY STORE DATA

## ADDED TAILWINDCSS

-- Rewritten the complete css into tailwindcss
-- IMPLEMENTED TOOGLE MODE (DARK,WHITE,SYSTEM)
USING WINDOW

## HIGHER ORDER COMPONENT

-- It is a function which takes a component and returns a component.

## Integrated MENUPAGE with data like Recommended many more with images

-- updated swiggy image url
-- CReated add feature for the menu page

## ADDED A MENU ACCORDION

-- on click on the Recommended or the button it collapse

## CONTOLLED AND UNCONTROLLED COMPONENT

## lifting the state up very basic

## useContext a new hook

##### REDUX

-- Use for state management
-- Creating add to card feature
-- Redux Store is a big object and it is kept in a central global place.
-- Any component can access it use it, modify it .
-- Redux has slices in redux store.
-- Slices (These are the logical separation eg:- logInfo, Cart Slice , and many more ).

## Architecture of REDUX TOOL KIT

-- Button -->onclick ==> dispatches a Action ==> which calls a function(Reducer Function) ==> which updates the Slice of the Redux store [Cart(1)] Internally modifies the cart. (Writing the data)

-- We will use the selector to read the data from the slice and modify the ui of the CART

-- When we use the selector it is known as Subscribing to our store.(Sync with the store )

## Redux Toolkit

- Install r@edux/toolkit and react-redux
- Build the store
- Connect store to app
- Create a Slice(cartSlice)
- Dispatch an action
- Read the data with selector

-- Created a Cart page using React

### Types of testing (Developer)

-- Unit Testing
-- tesing our component in isolation . Single component is tested
-- Integration Testing
--
-- End to End Testing Aka E2E testing
--requires advance tools selielium, any many more

## React Testing library uses ( JEST )

- Installed React Testing Library
  -- Installed Jest and bebel dependencies also
  -- Created a Babel.config.js file
  -- Configure parcel config file to disable default Babel transpilation
  -- Jest configuration (npx create-jest)
  -- Install JSDOM library
  -- Created a TESTING folder foldername as("**tests**"). as jest indicated, it is trying to match the path.(or use Header.test.js or sum.spec.js) it scans for such files with .js and .tsx files
  -- install @babel/preset-react to use jsx in test file
  -- Installing @testing-library/jest-dom

-- How to test Click events? (using fireEvent.click)
-- PASSING A MOCK_DATA FOR TESTING WHEN USING (PROPS)
